// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
syntax = "proto2";
package kudu.ranger;
option java_package = "org.apache.kudu.ranger";

// Describes the type of action that can be performed in Ranger.
//
// SQL-like action types used by Ranger. ALL implies all other privilege types
// and all privilege types imply METADATA. METADATA is used for discovery
// (listing tables).
//
// The action type mapping is similar to the one in Sentry which was implemented
// before Ranger and the same privileges have to be enforced with both
// authorization providers.
//
// For more information on fine grained authz check out docs/security.adoc
enum ActionPB {
  SELECT = 0;
  INSERT = 1;
  UPDATE = 2;
  DELETE = 3;
  ALTER = 4;
  CREATE = 5;
  DROP = 6;
  ALL = 7;
  METADATA = 8;
}

// The following protobuf definitions are used as interface between
// Kudu master and the Ranger authorization plugin operating in a
// Java subprocess that is managed by the Kudu master.

// Describes a single Ranger authorization request per user.
message RangerRequestPB {
  // Database name the action is to be performed on.
  optional string database = 1;

  // Table name the action is to be performed on.
  optional string table = 2;

  // Column name the action is to be performed on.
  optional string column = 3;

  // Action to be authorized on the resource.
  optional ActionPB action = 4;
}

// Describes a single Ranger authorization response for a single user.
message RangerResponsePB {
  // Whether or not a request is allowed.
  optional bool allowed = 1;
}

// Describes a list of authorization requests sent to the Ranger service
// for a single user.
message RangerRequestListPB {
  repeated RangerRequestPB requests = 1;

  // User performing the action.
  optional string user = 2;
}

// Describes a list of authorization descison responded from the Ranger
// service for a request for a single user. Note that the order of
// responses is determined by the order of requests in RangerRequestListPB.
message RangerResponseListPB {
  repeated RangerResponsePB responses = 1;
}
