{
  "openapi": "3.0.3",
  "info": {
    "title": "Kudu REST API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "/api/v1",
      "description": "Kudu REST API v1"
    }
  ],
  "paths": {
    "/tables": {
      "get": {
        "summary": "List all tables",
        "description": "Retrieve a list of all tables in the Kudu cluster",
        "operationId": "listTables",
        "responses": {
          "200": {
            "description": "Successfully retrieved list of tables",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TablesResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable - master not ready or not leader",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new table",
        "description": "Create a new table in the Kudu cluster",
        "operationId": "createTable",
        "requestBody": {
          "description": "Table creation request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTableRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Table created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid table specification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "invalid_json": {
                    "summary": "Invalid JSON format",
                    "value": {
                      "error": "JSON table object is not correct: {\"name\":\"test_table\"}"
                    }
                  },
                  "missing_schema": {
                    "summary": "Missing required schema",
                    "value": {
                      "error": "JSON table object is not correct: {\"name\":\"test_table\",\"partition_schema\":{}}"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable - master not ready or not leader",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tables/{table_id}": {
      "get": {
        "summary": "Get table details",
        "description": "Retrieve detailed information about a specific table",
        "operationId": "getTable",
        "parameters": [
          {
            "name": "table_id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the table (32 characters)",
            "schema": {
              "type": "string",
              "pattern": "^[a-f0-9]{32}$",
              "minLength": 32,
              "maxLength": 32
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved table details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid table ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Table not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable - master not ready or not leader",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update table",
        "description": "Modify an existing table (alter table operation)",
        "operationId": "updateTable",
        "parameters": [
          {
            "name": "table_id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the table (32 characters)",
            "schema": {
              "type": "string",
              "pattern": "^[a-f0-9]{32}$",
              "minLength": 32,
              "maxLength": 32
            }
          }
        ],
        "requestBody": {
          "description": "Table alteration request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlterTableRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Table updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid table ID or alteration request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Table not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable - master not ready or not leader",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete table",
        "description": "Remove a table from the Kudu cluster",
        "operationId": "deleteTable",
        "parameters": [
          {
            "name": "table_id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the table (32 characters)",
            "schema": {
              "type": "string",
              "pattern": "^[a-f0-9]{32}$",
              "minLength": 32,
              "maxLength": 32
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Table deleted successfully"
          },
          "400": {
            "description": "Bad request - invalid table ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Table not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable - master not ready or not leader",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/leader": {
      "get": {
        "summary": "Get leader master information",
        "description": "Retrieve information about the current leader master",
        "operationId": "getLeaderMaster",
        "responses": {
          "200": {
            "description": "Successfully retrieved leader master information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderResponse"
                }
              }
            }
          },
          "404": {
            "description": "No leader master found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "TablesResponse": {
        "type": "object",
        "properties": {
          "tables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TableInfo"
            }
          }
        },
        "required": ["tables"]
      },
      "TableInfo": {
        "type": "object",
        "properties": {
          "table_id": {
            "type": "string",
            "description": "Unique identifier of the table",
            "pattern": "^[a-f0-9]{32}$"
          },
          "table_name": {
            "type": "string",
            "description": "Name of the table"
          }
        },
        "required": ["table_id", "table_name"]
      },
      "TableResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the table",
            "pattern": "^[a-f0-9]{32}$"
          },
          "name": {
            "type": "string",
            "description": "Name of the table"
          },
          "schema": {
            "$ref": "#/components/schemas/TableSchema"
          },
          "partition_schema": {
            "$ref": "#/components/schemas/PartitionSchema"
          },
          "owner": {
            "type": "string",
            "description": "Owner of the table"
          },
          "comment": {
            "type": "string",
            "description": "Comment associated with the table"
          },
          "extra_config": {
            "type": "object",
            "description": "Additional configuration for the table"
          }
        },
        "required": ["id", "name", "schema", "partition_schema", "owner"]
      },
      "TableSchema": {
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColumnSchema"
            }
          }
        },
        "required": ["columns"]
      },
      "ColumnSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Column name",
            "default": "new_column_name"
          },
          "type": {
            "type": "string",
            "description": "Column data type",
            "enum": [
              "INT8", "INT16", "INT32", "INT64", "UNIXTIME_MICROS",
              "FLOAT", "DOUBLE", "DECIMAL", "STRING", "BOOL", "BINARY",
              "VARCHAR", "DATE"
            ]
          },
          "is_key": {
            "type": "boolean",
            "description": "Whether this column is part of the primary key"
          },
          "is_nullable": {
            "type": "boolean",
            "description": "Whether this column can contain NULL values",
            "default": false
          }
        },
        "required": ["name", "type", "is_key", "is_nullable"]
      },
      "PartitionSchema": {
        "type": "object",
        "properties": {
          "hash_schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HashBucketSchema"
            },
            "description": "Table-wide hash schema. Hash schema for a particular range may be overridden by corresponding element in custom_hash_schema_ranges."
          },
          "range_schema": {
            "$ref": "#/components/schemas/RangeSchema"
          }
        }
      },
      "HashBucketSchema": {
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColumnIdentifier"
            },
            "description": "Column identifiers of columns included in the hash. Every column must be a component of the primary key."
          },
          "num_buckets": {
            "type": "integer",
            "minimum": 2,
            "description": "Number of buckets into which columns will be hashed. Must be at least 2."
          },
          "seed": {
            "type": "integer",
            "format": "int32",
            "description": "Seed value for hash calculation. Optional."
          }
        },
        "required": ["columns", "num_buckets"]
      },
      "RangeSchema": {
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColumnIdentifier"
            },
            "description": "Column identifiers of columns included in the range. All columns must be a component of the primary key."
          }
        },
        "required": ["columns"]
      },
      "ColumnIdentifier": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Column name"
          }
        },
        "description": "Column identifier - specify either id OR name, not both. Use name when creating tables."
      },
      "CreateTableRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the table to create"
          },
          "schema": {
            "$ref": "#/components/schemas/TableSchema"
          },
          "partition_schema": {
            "$ref": "#/components/schemas/PartitionSchema"
          },
            "num_replicas": {
            "type": "integer",
            "minimum": 1,
            "maximum": 7,
            "default": 3,
            "description": "Number of replicas for the table"
            },
          "owner": {
            "type": "string",
            "description": "Owner of the table"
          },
          "comment": {
            "type": "string",
            "description": "Comment for the table"
          }
        },
        "required": ["name", "schema", "partition_schema"]
      },
      "AlterTableRequest": {
        "type": "object",
        "properties": {
          "table": {
            "$ref": "#/components/schemas/TableIdentifier"
          },
          "alter_schema_steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlterTableStep"
            }
          },
          "new_table_name": {
            "type": "string",
            "description": "New name for the table",
            "default": "new_table_name"
          },
          "new_table_owner": {
            "type": "string",
            "description": "New owner for the table",
            "default": "new_table_owner"
          },
          "new_table_comment": {
            "type": "string",
            "description": "New comment for the table",
            "default": "new_table_comment"
          },
          "num_replicas": {
            "type": "integer",
            "minimum": 1,
            "maximum": 7,
            "description": "New replication factor for the table",
            "default": 3
          },
          "schema": {
            "$ref": "#/components/schemas/TableSchema",
            "description": "Current table schema (required when adding/dropping range partitions)"
          },
          "new_extra_configs": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "New extra configuration properties for the table"
          }
        }
      },
      "TableIdentifier": {
        "type": "object",
        "properties": {
          "table_name": {
            "type": "string",
            "description": "Name of the table"
          }
        },
        "description": "Table identifier - specify either table_id OR table_name"
      },
      "AlterTableStep": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ADD_COLUMN",
              "DROP_COLUMN",
              "RENAME_COLUMN",
              "ALTER_COLUMN",
              "ADD_RANGE_PARTITION",
              "DROP_RANGE_PARTITION"
            ]
          },
          "add_column": {
            "$ref": "#/components/schemas/AddColumnSpec"
          },
          "drop_column": {
            "$ref": "#/components/schemas/DropColumnSpec"
          },
          "rename_column": {
            "$ref": "#/components/schemas/RenameColumnSpec"
          },
          "alter_column": {
            "$ref": "#/components/schemas/AlterColumnSpec"
          },
          "add_range_partition": {
            "$ref": "#/components/schemas/AddRangePartitionSpec"
          },
          "drop_range_partition": {
            "$ref": "#/components/schemas/DropRangePartitionSpec"
          }
        },
        "required": ["type"],
        "description": "Alter table step - exactly one operation field must be set based on type"
      },
      "AddColumnSpec": {
        "type": "object",
        "properties": {
          "schema": {
            "$ref": "#/components/schemas/ColumnSchema"
          }
        },
        "required": ["schema"]
      },
      "DropColumnSpec": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the column to drop"
          }
        },
        "required": ["name"]
      },
      "RenameColumnSpec": {
        "type": "object",
        "properties": {
          "old_name": {
            "type": "string",
            "description": "Current name of the column"
          },
          "new_name": {
            "type": "string",
            "description": "New name for the column"
          }
        },
        "required": ["old_name", "new_name"]
      },
      "AlterColumnSpec": {
        "type": "object",
        "properties": {
          "delta": {
            "$ref": "#/components/schemas/ColumnSchemaDelta"
          }
        },
        "required": ["delta"]
      },
      "ColumnSchemaDelta": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Column name to alter"
          },
          "new_name": {
            "type": "string",
            "description": "New column name"
          },
          "default_value": {
            "type": "string",
            "format": "byte",
            "description": "New default value (encoded)"
          },
          "remove_default": {
            "type": "boolean",
            "description": "Whether to remove the default value"
          },
          "new_comment": {
            "type": "string",
            "description": "New comment for the column"
          }
        }
      },
      "AddRangePartitionSpec": {
        "type": "object",
        "properties": {
          "range_bounds": {
            "$ref": "#/components/schemas/RowOperations",
            "description": "Range bounds for the partition (RANGE_LOWER_BOUND and RANGE_UPPER_BOUND operations)"
          },
          "dimension_label": {
            "type": "string",
            "description": "Dimension label for tablet placement"
          },
          "custom_hash_schema": {
            "$ref": "#/components/schemas/CustomHashSchema"
          }
        }
      },
      "DropRangePartitionSpec": {
        "type": "object",
        "properties": {
          "range_bounds": {
            "$ref": "#/components/schemas/RowOperations",
            "description": "Range bounds for the partition to drop"
          }
        }
      },
      "CustomHashSchema": {
        "type": "object",
        "properties": {
          "hash_schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HashBucketSchema"
            }
          }
        }
      },
      "RowOperations": {
        "type": "object",
        "description": "Row operations for range bounds - complex format, see protobuf documentation"
      },
      "LeaderResponse": {
        "type": "object",
        "properties": {
          "leader": {
            "type": "string",
            "description": "URL of the leader master",
            "format": "uri"
          }
        },
        "required": ["leader"]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message describing what went wrong"
          }
        },
        "required": ["error"],
        "examples": {
          "table_not_found": {
            "summary": "Table not found",
            "value": {
              "error": "Table not found"
            }
          },
          "invalid_table_id": {
            "summary": "Invalid table ID",
            "value": {
              "error": "Invalid table ID: must be exactly 32 characters long."
            }
          },
          "invalid_json": {
            "summary": "Invalid JSON format",
            "value": {
              "error": "JSON table object is not correct: {\"name\":\"test_table\"}"
            }
          },
          "method_not_allowed": {
            "summary": "HTTP method not allowed",
            "value": {
              "error": "Method not allowed"
            }
          },
          "master_not_ready": {
            "summary": "Master not ready",
            "value": {
              "error": "Master is not ready: CatalogManager is not running"
            }
          },
          "no_leader": {
            "summary": "No leader master found",
            "value": {
              "error": "No leader master found"
            }
          }
        }
      }
    }
  }
}